import numpy as np
from scipy.stats import ks_2samp
from sklearn.model_selection import train_test_split

from treeffuser import Treeffuser


def test_samples():
    """
    Perform a sanity check to verify that samples generated by a simple model with limited
    data are statistically indistinguishable from the actual data.
    """
    n = 10**3
    rng = np.random.default_rng(seed=0)

    x = rng.uniform(low=1, high=2, size=(n, 1))
    sign = 2 * rng.binomial(n=1, p=0.5, size=(n, 1)) - 1
    y = rng.normal(loc=sign * x, scale=abs(x), size=(n, 1))

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.05, random_state=0)
    batch_test, y_dim = y_test.shape

    model = Treeffuser()
    model.fit(x_train, y_train)

    n_samples = 20
    y_samples = model.sample(x_test, n_samples=n_samples, n_parallel=50, n_steps=30, seed=0)
    assert y_samples.shape == (n_samples, batch_test, y_dim)

    # Check that the samples are statistically indistinguishable from the data
    result = ks_2samp(y_samples[0, :].flatten(), y_test.flatten())
    assert result.pvalue > 0.05

    # Basic tests for Samples methods: run and shape
    assert y_samples.confidence_interval().shape == (2, batch_test, y_dim)
    assert y_samples.correlation().shape == (batch_test, y_dim, y_dim)
    assert len(y_samples.kde()) == (batch_test)
    assert y_samples.max().shape == (batch_test, y_dim)
    assert y_samples.mean().shape == (batch_test, y_dim)
    assert y_samples.median().shape == (batch_test, y_dim)
    assert len(y_samples.mode()) == batch_test
    assert y_samples.min().shape == (batch_test, y_dim)
    assert y_samples.quantile(q=[0.05, 0.95]).shape == (2, batch_test, y_dim)
    assert y_samples.range().shape == (batch_test, y_dim, 2)
    assert y_samples.std().shape == (batch_test, y_dim)


test_samples()
