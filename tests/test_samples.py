import numpy as np
import pytest

from treeffuser.samples import Samples


def test_samples():
    """
    Perform a sanity check to verify that samples generated by a simple model with limited
    data are statistically indistinguishable from the actual data.
    """
    y_samples = np.random.rand(10, 15, 5)
    _, batch_test, y_dim = y_samples.shape

    # Basic tests for Samples methods: run and shape
    y_samples = Samples(y_samples)
    assert y_samples.sample_correlation().shape == (batch_test, y_dim, y_dim)
    assert len(y_samples.sample_kde()) == (batch_test)
    assert y_samples.sample_max().shape == (batch_test, y_dim)
    assert y_samples.sample_mean().shape == (batch_test, y_dim)
    assert y_samples.sample_median().shape == (batch_test, y_dim)
    assert y_samples.sample_min().shape == (batch_test, y_dim)
    assert y_samples.sample_quantile(q=[0.05, 0.95]).shape == (2, batch_test, y_dim)
    assert y_samples.sample_std().shape == (batch_test, y_dim)

    with pytest.raises(ValueError, match="only applies to unidimensional responses"):
        y_samples.sample_confidence_interval()
    with pytest.raises(ValueError, match="only applies to unidimensional responses"):
        assert len(y_samples.sample_mode()) == batch_test
    with pytest.raises(ValueError, match="only applies to unidimensional responses"):
        assert y_samples.sample_range().shape == (batch_test, y_dim, 2)

    assert y_samples[..., 0].sample_confidence_interval().shape == (2, batch_test)
    assert y_samples[..., 0].sample_mode().shape == (batch_test,)
    assert y_samples[..., 0].sample_range().shape == (batch_test, 2)


def test_sample_subscript():
    samples = np.random.rand(10, 5, 3)
    samples = Samples(samples)

    # check that an error is raised when the first or the second dimensions are subscripted
    # with an integer
    with pytest.raises(ValueError, match="first dimension of the samples"):
        assert samples[0].shape == (5, 3)
    with pytest.raises(ValueError, match="second dimension of the samples"):
        assert samples[:, 0].shape == (10, 3)

    # check that the subscripting works as expected otherwise
    assert samples[..., 0].shape == (10, 5)
    assert samples[:, [0]].shape == (10, 1, 3)
    assert samples[[0], ...].shape == (1, 5, 3)
    assert samples[1:3, 2:4, 1].shape == (2, 2)
